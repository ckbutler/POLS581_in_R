- Class: meta
  Course: Swirl Lessons
  Lesson: Logit Regression
  Author: Colin M. Henry
  Type: Standard
  Organization: University of New Mexico
  Version: 2.4.3

- Class: text
  Output: "This lesson will show you how to set up and perform a bivariate Logistic regression. Logsitic regression is another type of regression analysis, a broader category of statistical techniques that are the bread-and-butter of quantitative social science. The Table of Bivariate Tests handout shows that you can use Logistic regression to examine the relationship between a dummy dependent variable and a continuous independent variable. In this lesson, we'll set up and perform a dummy-by-continuous test using data from the 'gss' dataset included with [?]."

- Class: text
  Output: "Note that this lesson has automatically imported data from the 'gss' dataset into a dataframe called 'gss.' You should see an object by that name in the upper right-hand pane in RStudio. For more information on importing data into R, please see the 'Loading Data' lesson in this course. Moreover, we will be using the 'ggplot2' library, which you should install BEFORE starting the lesson. If you have previously installed the 'tidyverse' library collection, 'ggplot2' is installed on your system."
  
- Class: cmd_question
  Output: "First, we need to select variables for exploration. Again, we have alread picked two for you! The independent variable, age, indicates the age of the respondent. To view the 'age' variable, type 'gss$age' The dollar sign symbol indicates that we'd like to view the 'age' variable inside the 'gss' dataframe object."
  CorrectAnswer: gss$age
  AnswerTests: any_of_exprs('gss$age')
  Hint: "Type gss$age to view the age variable."

- Class: cmd_question
  Output: "In your console, you will see a long list of integers. While we can see from this output that the variable is continuous, we want to be sure that R has coded the variable as a continuous number. To check this, use the 'class()' function by typing 'class(gss$age).' This function will display the variable's type."
  CorrectAnswer: class(gss$age)
  AnswerTests: any_of_exprs('class(gss$age)')
  Hint: "Type class(gss$age) to view the variable type."
  
- Class: cmd_question
  Output: "In your console, you will see the word 'integer.' This means that R has coded this variable as a number. But we're not done quite yet! We should also generate some simple descriptive statistics of the variable so that we have advanced notice of any outliers or obvious patterns. To generate some basic descriptive statistics, type 'summary(gss$age).' This function will return the minimum and maximum, mean, and median values of the variable. Also note that the 'NA' column will show you how many observations are missing from your dataset." 
  CorrectAnswer: summary(gss$age)
  AnswerTests: any_of_exprs('summary(gss$age)')
  Hint: "Type summary(gss$age) to generate descriptive statistics for the age variable."
  
- Class: text
  Output: "You should always look at summary statistics and check the types of the variables that you use before inserting them into models like Logistic regression. Sometimes, R will let you run a statistical test without error even if you put in the wrong type of variable. You won't get an error message, but the results might be junk!"
  
- Class: cmd_question
  Output: "We've also selected an unordered categorical dependent variable for you, 'cappun,' which indicates whether the respondent favors or opposes the death penalty for murder. It has two levels, 'yes' and 'no.' Type 'gss$cappun' below to view the dependent variable."
  CorrectAnswer: gss$cappun
  AnswerTests: any_of_exprs('gss$cappun')
  Hint: "Type gss$cappun."

- Class: cmd_question
  Output: "We can see that the dependent variable is coded '0' and '1', with '0' indicating lack of support, and '1' the opposite. Now, we need to turn the variable into a factor variable with descriptive labels. This allows R to recognize each value as a discrete category, rather than a continuous value. We will store the new factor varaible in a new column, 'cappun_dummy,' in the gss data frame. In the same command, we will also define the levels of the variable. We already know that the variable ranges from 0 to 1, so the levels should be, of course, 0 and 1. Finally, we also want to apply descriptive labels to the levels, as the range semantically indicates 'oppose' and 'support.' This will be a long command! Type 'gss$cappun_dummy <- factor(gss$cappun_dummy, levels = c(0,1), labels = c("oppose", "support"))' below to create a new factor variable and store it in the column called 'cappun_dummy.'"
  CorrectAnswer: gss$cappun_dummy <- factor(gss$cappun, levels = c(0,1), labels = c("oppose", "support"))
  AnswerTests: any_of_exprs('gss$cappun_dummy <- factor(gss$cappun, levels = c(0,1), labels = c("oppose", "support"))')
  Hint: "Type gss$cappun_dummy <- factor(gss$cappun, levels = c(0,1), labels = c("oppose", "support"))."
  
- Class: text
  Output: "That was a long command! Take a second to review what you typed. In the 'factor()' function, we first supplied the variable from the dataset that we want to convert into a factor, then we supplied a list using the 'c()' function of the levels of interest, and then we defined the labels for each of these levels with another list using the 'c()' function. Now, when you examine the 'cappun_dummy' variable, you will see a list of the descriptive labels, rather than the numerical values."

- Class: cmd_question
  Output: "Now we're ready to create a Logistic regression model. Run a Logistic regression with the 'glm()' function. The 'glm' in the function stands for 'generalized linear model,' and can be used for a wide variety of related linear models. Today, we're going to be using the 'logit' option in the function. Type 'glm(cappun_dummy ~ age, data = gss, family = binomial(link = "logit"))' below to create a regression model for our variables of interest. Note that the dependent variable comes first, followed by a tilde ('~'), and then the independent variable. Think of this as roughly equivalent to the equation for a line, y = mx + b, where 'y' is the dependent variable, 'x' is the independent variable, and the slope, 'm', and intercept, 'b', are what the model is estimating. This function also uses the option 'data = gss', which tells the function to use the 'gss' data frame. And finally, the 'family' option is a very long way of telling the function to apply Logistic regression to our variables of interest."
  CorrectAnswer: glm(cappun_dummy ~ age, data = gss, family = binomial(link = "logit"))
  AnswerTests: any_of_exprs('glm(cappun_dummy ~ age, data = gss, family = binomial(link = "logit"))')
  Hint: "Type glm(cappun_dummy ~ age, data = gss, family = binomial(link = "logit"))."

- Class: cmd_question
  Output: "Calling the 'glm()' function on its own returns coefficients for the intercept and the independent variable for each category of the dependent variable. But notice that it doesn't return whether the model is significant, or anything else we need to interpret the results. Instead, we need  to use the assignment operator, '<-', to create a model object that we can return to later. Type 'model <- glm(cappun_dummy ~ age, data = gss, family = binomial(link = "logit"))' to create an object called 'model' that contains the results of the Logistic regression."
  CorrectAnswer: model <- glm(cappun_dummy ~ age, data = gss, family = binomial(link = "logit"))
  AnswerTests: any_of_exprs('model <- glm(cappun_dummy ~ age, data = gss, family = binomial(link = "logit"))')
  Hint: "Type model <- glm(cappun_dummy ~ age, data = gss, family = binomial(link = "logit")) to build the model."

- Class: cmd_question
  Output: "The above command, like most assignment commands, produces no output. However, now that we've produced a model object, we can apply all sorts of other functions to it to generate interesting results or visualizations. For instance, we can get a general impression of the the regression model using the 'summary()' function. Type 'summary(model)' below to generate output with residuals, coefficients, indicators of statistical significance, and more."
  CorrectAnswer: summary(model)
  AnswerTests: any_of_exprs('summary(model)')
  Hint: "Type summary(model) to view the model."

- Class: mult_question
  Output: "Great! In the coefficients section of the output, the p-values of the intercept and independent variable of interest are in the column marked 'Pr(>|z|).' Is the independent variable statistically significant?"
  AnswerChoices: Yes; No
  CorrectAnswer: Yes
  AnswerTests: omnitest(correctVal='Yes')
  Hint: "Look again. What is the p-value for the independent variable, 'age'?"
  
- Class: cmd_question
  Output: "Excellent work! Now, interpreting the p-value is just one way to understand what the model is telling you. As with many statistical models, we should use post-estimation tools to extract more information (and sometimes cool visuals) from the Logistic regression model. One simple way to do this is to plot the predicted values of the dependent variable, support for capital punishment, against the actual values of the independent variable, age. With this plot, we can visualize how the probability of the respondent supporting capital punishment rises as the age of the respondent rises. Let's begin by loading the 'ggplot2' library. 'ggplot2' is part of the Tidyverse, and provides a powerful set of tools for generating graphs, maps, and other data visualizations. Type 'library(ggplot2)' below to load the library."
  CorrectAnswer: library(ggplot2)
  AnswerTests: any_of_exprs('library(ggplot2)')
  Hint: "Type library(ggplot2) to load the library."
  
- Class: cmd_question
  Output: "To create a simple graph, type 'ggplot(data = model, aes(x = model$model$age, y = model$fitted.values)) + geom_line()' below. Don't worry too much about the structure of the ggplot() function --- visit the Data Visualization lesson for more detailed information on how to use the 'ggplot2' library and the ggplot() function. Instead, pay attention to the data input for the 'x' and 'y' axes of the graph. For the 'x' axis, we want to point the ggplot() function to the independent variable, age. Why use the age variable included in the 'model' object instead of the 'gss' data frame? Because both the 'age' and 'fitted.values' variables are created by the Logistic regression function, glm(), we used before, we can be sure that they are the same length, which is REQUIRED when using ggplot(). Keep in mind that there are many different strategies for generating post-estimation data and visualizing statistical models, and you should explore these before you decide to include visualizations in manuscripts intended for publication. Type the above command to continue. In a typical configuration of RStudio, it will produce a plot in the lower right-hand pane."
  CorrectAnswer: ggplot(data = model, aes(x = model$model$age, y = model$fitted.values)) + geom_line()
  AnswerTests: any_of_exprs('ggplot(data = model, aes(x = model$model$age, y = model$fitted.values)) + geom_line()')
  Hint: "Type ggplot(data = model, aes(x = model$model$age, y = model$fitted.values)) + geom_line() to produce the plot."
  
- Class: text
  Output: "Great work! In this lesson, you have learned how to setup, create, and explore a bivariate Logistic regression model."
