- Class: meta
  Course: Swirl Lessons
  Lesson: mLogit Regression
  Author: Colin M. Henry
  Type: Standard
  Organization: University of New Mexico
  Version: 2.4.3

- Class: text
  Output: "This lesson will show you how to set up and perform a bivariate Multinomial Logistic regression. Multinomial Logsitic regression is another type of regression analysis, a broader category of statistical techniques that are the bread-and-butter of quantitative social science. The Table of Bivariate Tests handout shows that you can use Multinomial Logistic regression to examine the relationship between an unordered categorical dependent variable and a continuous independent variable. In this lesson, we'll set up and perform a categorical-by-continuous test using data from the 'gss' dataset included with [?]."

- Class: text
  Output: "Note that this lesson has automatically imported data from the 'gss' dataset into a dataframe called 'gss.' You should see an object by that name in the upper right-hand pane in RStudio. For more information on importing data into R, please see the 'Loading Data' lesson in this course."
  
- Class: cmd_question
  Output: "First, we need to select variables for exploration. Again, we have alread picked two for you! The independent variable, age, indicates the age of the respondent. To view the 'age' variable, type 'gss$age' The dollar sign symbol indicates that we'd like to view the 'age' variable inside the 'gss' dataframe object."
  CorrectAnswer: gss$age
  AnswerTests: any_of_exprs('gss$age')
  Hint: "Type gss$age to view the age variable."

- Class: cmd_question
  Output: "In your console, you will see a long list of integers. While we can see from this output that the variable is continuous, we want to be sure that R has coded the variable as a continuous number. To check this, use the 'class()' function by typing 'class(gss$age).' This function will display the variable's type."
  CorrectAnswer: class(gss$age)
  AnswerTests: any_of_exprs('class(gss$age)')
  Hint: "Type class(gss$age) to view the variable type."
  
- Class: cmd_question
  Output: "In your console, you will see the word 'integer.' This means that R has coded this variable as a number. But we're not done quite yet! We should also generate some simple descriptive statistics of the variable so that we have advanced notice of any outliers or obvious patterns. To generate some basic descriptive statistics, type 'summary(gss$age).' This function will return the minimum and maximum, mean, and median values of the variable. Also note that the 'NA' column will show you how many observations are missing from your dataset." 
  CorrectAnswer: summary(gss$age)
  AnswerTests: any_of_exprs('summary(gss$age)')
  Hint: "Type summary(gss$age) to generate descriptive statistics for the age variable."
  
- Class: text
  Output: "You should always look at summary statistics and check the types of the variables that you use before inserting them into models like Multinomial Logistic regression. Sometimes, R will let you run a statistical test without error even if you put in the wrong type of variable. You won't get an error message, but the results might be junk!"
  
- Class: cmd_question
  Output: "We've also selected an unordered categorical dependent variable for you, 'getahead,' which asks respondents to describe how the most likely path to success in modern American society. It has three levels: 'hard work,' 'luck,' and 'both.' Type 'gss$getahead' below to view the dependent variable."
  CorrectAnswer: gss$getahead
  AnswerTests: any_of_exprs('gss$getahead')
  Hint: "Type gss$getahead."
  
- Class: cmd_question
  Output: "You will see a list of values ranging from 1 to 3. This isn't too descriptive, is it? We will need to make some changes to the variable before it is useful in our Multinomial Logistic regression model. First, we want to turn the variable into a factor variable. This allows R to recognize each value as a discrete category, rather than a continuous value. We will store the new factor varaible in a new column in the gss data frame. In the same command, we will also define the levels of the variable. We already know that the variable ranges from 1 to 3, so the levels should be 1, 2, and 3. Finally, we also want to apply descriptive labels to the levels, as the range semantically indicates 'hard work,' 'luck,' and 'both.' This will be a long command! Type 'gss$getahead_factor <- factor(gss$getahead, levels = c(1,2,3), labels = c('low', 'medium', 'high'))' below to create a new factor variable and store it in a new column called 'getahead_factor.'"
  CorrectAnswer: gss$getahead_factor <- factor(gss$getahead, levels = c(1,2,3), labels = c('hard work', 'luck', 'both'))
  AnswerTests: any_of_exprs('gss$getahead_factor <- factor(gss$getahead, levels = c(1,2,3), labels = c('hard work', 'luck', 'both'))')
  Hint: "Type gss$getahead_factor <- factor(gss$getahead, levels = c(1,2,3), labels = c('hard work', 'luck', 'both'))."
  
- Class: text
  Output: "That was a long command! Take a second to review what you typed. In the 'factor()' function, we first supplied the variable from the dataset that we want to convert into a factor, then we supplied a list using the 'c()' function of the levels of interest, and then we defined the labels for each of these levels with another list using the 'c()' function. Now, when you examine the 'getahead_factor' variable, you will see a list of the descriptive labels, rather than the numerical values."
  
- Class: cmd_question
  Output: "Now that we've prepared the variables, we need to load a library to create the Multinomial Logistic regression model. Because R is open source and there are lots of people creating free packages, there are a few ways to create the model. But for our purposes, we're going to use the nnet library, which contains the 'multinom()' function. Load the library by typing 'library(nnet' below."
  CorrectAnswer: library(nnet)
  AnswerTests: any_of_exprs('library(nnet)')
  Hint: "Type library(nnet)."  

- Class: cmd_question
  Output: "Great! Now we're ready to create a Multinomial Logistic regression model. Run a Multinomial Logistic regression with the 'multinom()' function. Type 'multinom(getahead_factor ~ age, data = gss)' below to create a regression model for our variables of interest. Note that the dependent variable comes first, followed by a tilde ('~'), and then the independent variable. Think of this as roughly equivalent to the equation for a line, y = mx + b, where 'y' is the dependent variable, 'x' is the independent variable, and the slope, 'm', and intercept, 'b', are what the model is estimating. This function also uses the option 'data = gss', which tells the function to use the 'gss' data frame."
  CorrectAnswer: multinom(getahead_factor ~ age, data = gss)
  AnswerTests: any_of_exprs('multinom(getahead_factor ~ age, data = gss)')
  Hint: "Type multinom(getahead_factor ~ age, data = gss)."

- Class: cmd_question
  Output: "Calling the 'multinom()' function on its own returns coefficients for the intercept and the independent variable for each category of the dependent variable. But notice that it doesn't return whether the model is significant, or anything else we need to interpret the results. Instead, we need  to use the assignment operator, '<-', to create a model object that we can return to later. Type 'model <- multinom(getahead_factor ~ age, data = gss)' to create an object called 'model' that contains the results of the Multinomial Logistic regression."
  CorrectAnswer: model <- multinom(getahead_factor ~ age, data = gss)
  AnswerTests: any_of_exprs('model <- multinom(getahead_factor ~ age, data = gss)')
  Hint: "Type model <- multinom(getahead_factor ~ age, data = gss) to build the model."

- Class: cmd_question
  Output: "The above command, like most assignment commands, produces no output. However, now that we've produced a model object, we can apply all sorts of other functions to it to generate interesting results or visualizations. For instance, we can get a general impression of the the Multinomial regression model using the 'summary()' function. Type 'summary(model)' below to generate output with residuals, coefficients, indicators of statistical significance, and R-squared statistic, and more."
  CorrectAnswer: summary(model)
  AnswerTests: any_of_exprs('summary(model)')
  Hint: "Type summary(model) to view the model."

- Class: mult_question
  Output: "Great! In the coefficients section of the output, the p-values of the intercept and independent variable of interest are in the column marked 'Pr(>|t|).' Is the independent variable statistically significant?"
  AnswerChoices: Yes; No
  CorrectAnswer: Yes
  AnswerTests: omnitest(correctVal='Yes')
  Hint: "Look again. What is the p-value for the independent variable, 'age'?"
