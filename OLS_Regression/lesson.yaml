- Class: meta
  Course: Swirl Lessons
  Lesson: OLS Regression
  Author: Colin M. Henry
  Type: Standard
  Organization: University of New Mexico
  Version: 2.4.3

- Class: text
  Output: "This lesson will show you how to set up and perform a bivariate OLS regression. OLS regression is a type of regression analysis, a broader category of statistical techniques that are the bread-and-butter of quantitative social science. From your Table of Bivariate Tests handout, you'll see that you can use OLS regression to examine the relationships between two continuous variables. In this lesson, we'll set up and perform a continuous-by-continuou test using data from the 'states' dataset included with [?]."

- Class: text
  Output: "Note that this lesson has automatically imported data from the 'states' dataset into a dataframe called 'states.' You should see an object by that name in the upper right-hand pane in RStudio. For more information on importing data into R, please see the 'Loading Data' lesson in this course."
  
- Class: cmd_question
  Output: "First, we need to select two continuous variables for analysis. Of course, we have alread picked two for you! The independent variable, gay_support, indicates the percentage of the US state that supports gay rights. To view the 'gay_support' variable, type 'states$gay_support' The dollar sign symbol indicates that we'd like to view the 'gay_support' variable inside the 'states' dataframe object."
  CorrectAnswer: states$gay_support
  AnswerTests: any_of_exprs('states$gay_support')
  Hint: "Type states$gay_support to view the gay_support variable."

- Class: cmd_question
  Output: "In your console, you will see a long list of integers. While we can see from this output that the variable is continuous, we want to be sure that R has coded the variable as a continuous number. To check this, use the 'class()' function by typing 'class(states$gay_support).' This function will display the variable's type."
  CorrectAnswer: class(states$gay_support)
  AnswerTests: any_of_exprs('class(states$gay_support)')
  Hint: "Type class(states$gay_support) to view the variable type."
  
- Class: cmd_question
  Output: "In your console, you will see the word 'integer.' This means that R has coded this variable as a number. But we're not done quite yet! We should also generate some simple descriptive statistics of the variable so that we have advanced notice of any outliers or obvious patterns. While the gay_support variable only has 50 observations, your future work might included variables with hundreds, thousands, or tens of thousands of observations. Patterns won't be obvious at first glance! To generate some basic descriptive statistics, type 'summary(states$gay_support).' This function will return the minimum and maximum, mean, and median values of the variable."
  CorrectAnswer: summary(states$gay_support)
  AnswerTests: any_of_exprs('summary(states$gay_support)')
  Hint: "Type summary(states$gay_support) to generate descriptive statistics for the gay_support variable."
  
- Class: text
  Output: "You should always look at summary statistics and check the types of the variables that you use before inserting them into models like OLS regression. Sometimes, R will let you run a statistical test without error even if you put in the wrong type of variable. You won't get an error message, but the results might be junk!"
  
- Class: cmd_question
  Output: "We've also selected a continuous independent variable for you, indpct_m, which indicates the percentage of voters in each state that identify as political independents. If you'd like, you can enter the 'play()' function to momentarily leave the lesson and examine the indpct_m variable. Remember to enter the 'nxt()' function to return to the lesson. For now, we're going to skip looking at the type and descriptive statistics of indpct_m, and jump right into correlations. Before we create an OLS regression model, we should examine the two variables of interest for correlation. The correlation indicates the direction and strength of the relationship between support for gay rights and the percentage of independents. Use the 'cor()' command by typing 'cor(states$gay_support, states$indpct_m).'"
  CorrectAnswer: cor(states$gay_support, states$indpct_m)
  AnswerTests: any_of_exprs('cor(states$gay_support, states$indpct_m)')
  Hint: "Type cor(states$gay_support, states$indpct_m) to generate a correlation coefficient."
  
- Class: cmd_question
  Output: "The 'corr()' function returns a correlation coefficient indiciating the direction (positive) and the strength (about 0.51) of the relationship betewen support for gay rights and the percentage of independents in the state. This indicates that there is a relationship between the two variables that's worth investigating. But before we can build the OLS regression model, we should check to make sure that our variables fulfill some of the basic assumptions of the model. One othese assumptions is that the variables we use are normally distributed. We can check this assumption visually in R by creating histograms of each variable. To generate histogram of the gay_support variable, type 'hist(states$gay_support).' This function will produce a new plot in the lower right hand pane of RStudio."
  CorrectAnswer: hist(states$gay_support)
  AnswerTests: any_of_exprs('hist(states$gay_support)')
  Hint: "Type hist(states$gay_support) to generate a histogram."
  
- Class: mult_question
  Output: "Cool plot! Is the variable (about) normally distributed?"
  AnswerChoices: Yes; No
  CorrectAnswer: Yes
  AnswerTests: omnitest(correctVal='Yes')
  Hint: "Compare the histogram to a normal distribution from class."

- Class: cmd_question
  Output: "We can now say that the variable representing the support for gay rights is normally distributed. The percentage of independents is also roughly normally distributed. You don't have to take our word for it; use the 'play()' function to pause the lesson and create a histogram of the indpct_m variable if you want. Remember to use the 'nxt()' function to return to the lesson. Now, we also need to check if there is a linear relationship between the two variables. OLS regression assumes that there is a linear, rather than curvilinear, relationship between our variables of interest. We can check this visually using a scatter plot. Type 'plot(states$gay_support, states$indpct_m)' below to create a basic scatter plot in the lower right hand pane of RStudio."
  CorrectAnswer: plot(states$gay_support, states$indpct_m)
  AnswerTests: any_of_exprs('plot(states$gay_support, states$indpct_m)')
  Hint: "Type plot(states$gay_support, states$indpct_m) to generate a scatter plot."
  
- Class: mult_question
  Output: "Nice plot! Is the relationship (about) linear?"
  AnswerChoices: Yes; No
  CorrectAnswer: Yes
  AnswerTests: omnitest(correctVal='Yes')
  Hint: "Look again. Does the scatter plot look like it 'curves'?"
  
- Class: cmd_question
  Output: "Great! Now we're ready to create an OLS regression model. Run an OLS regression with the 'lm()' function. Type 'lm(states$gay_support ~ states$indpct_m)' below to create a regression model for our variables of interest. Note that the dependent variable comes first, followed by a tilde ('~'), and then the independent variable. Think of this as roughly equivalent to the equation for a line, y = mx + b, where 'y' is the dependent variable, 'x' is the independent variable, and the slope, 'm', and intercept, 'b', are what the model is estimating."
  CorrectAnswer: lm(states$gay_support ~ states$indpct_m)
  AnswerTests: any_of_exprs('lm(states$gay_support ~ states$indpct_m)')
  Hint: "Type lm(states$gay_support ~ states$indpct_m) to build the model."